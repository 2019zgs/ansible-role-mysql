---
- import_tasks: prepare.yaml

- name: Ensure mysql group
  group:
    name: mysql
    system: yes
    state: present

- name: Ensure mysql user
  user:
    group: mysql
    name: mysql
    system: yes
    comment: mysql daemon user
    create_home: false
    shell: /bin/false
    state: present

- name: Installing dependencies
  yum:
    name: "{{ dependencies | join(',') }}"
    state: present
  vars:
    dependencies:
      - tzdata
      - openssl
      - openssl-devel
      - libaio-devel
      - numactl-libs
      - python-PyMySQL
      - python-cryptography
  no_log: true

- name: Check mysql package is already exists
  stat:
    path: "{{ role_path }}/files/{{ mysql_download_url | basename }}"
  become: false
  run_once: true
  delegate_to: localhost
  register: _mysql_package_stat

- name: Download mysql package
  get_url:
    url: "{{ mysql_download_url }}"
    dest: "{{ role_path }}/files/"
    checksum: "md5:{{ mysql_download_url }}.md5"
  become: false
  run_once: true
  delegate_to: localhost
  when:
    - not _mysql_package_stat.stat.exists
    - not _mysql_stat.stat.exists
  register: _mysql_package

- name: Unarchive mysql binary package
  unarchive:
    src: "files/{{ mysql_download_url | basename }}"
    dest: /usr/local/
    creates: /usr/local/mysql
    remote_src: false
    owner: mysql
    group: mysql
  when:
    - not _mysql_stat.stat.exists
    - _mysql_package_stat.stat.exists or _mysql_package is not skipped
  register: _mysql_unarchive

- name: Move /usr/local/mysql-{{ mysql_version }}-el7-x86_64 => /usr/local/mysql
  shell: mv /usr/local/mysql-{{ mysql_version }}-el7-x86_64 /usr/local/mysql
  when:
    - _mysql_unarchive is not skipped
  tags:
    - skip_ansible_lint

- name: Ensure directories
  file:
    path: "{{ item }}"
    state: directory
    recurse: true
    owner: mysql
    group: mysql
  loop:
    - /usr/local/mysql/etc
    - "{{ mysql_datadir }}"
    - "{{ mysql_logdir }}"
    - "{{ mysql_pidfile | dirname }}"
    - "{{ mysql_socket | dirname }}"

- name: Generate my.cnf
  template:
    src: my.cnf.j2
    dest: /usr/local/mysql/etc/my.cnf
    owner: mysql
    group: mysql
    validate: /usr/local/mysql/bin/mysqld --defaults-file=%s --validate-config
  notify:
    - restart mysqld

- name: Generate logrotate for logs
  template:
    src: mysql-log-rotate.j2
    dest: /etc/logrotate.d/mysql
    owner: root
    group: root
    mode: 0644

- name: Generate mysql startup script
  template:
    src: mysqld.init.j2
    dest: /etc/init.d/mysqld
    mode: 0755

- name: Check initialize status
  shell: ls -lA {{ mysql_datadir }} | grep -v total | wc -l
  register: need_to_initialize
  changed_when: false
  tags:
    - skip_ansible_lint

- name: Initializing the Data Directory
  shell: /usr/local/mysql/bin/mysqld --initialize-insecure --user=mysql --basedir=/usr/local/mysql --datadir={{ mysql_datadir }}
  register: mysql_initialize_status
  when:
    - not need_to_initialize is skipped
    - need_to_initialize.stdout|int == 0
  tags:
    - skip_ansible_lint

- name: Run handlers to restart MySQL
  meta: flush_handlers
  no_log: yes

- name: Update root password
  mysql_user:
    name: root
    host_all: true
    password: "{{ mysql_root_password }}"
    login_user: root
    login_unix_socket: "{{ mysql_socket }}"
    sql_log_bin: false
  no_log: true
  when: mysql_initialize_status is not skipped

- name: Removes all anonymous user accounts
  mysql_user:
    name: ""
    host_all: yes
    login_user: root
    login_password: "{{ mysql_root_password }}"
    login_unix_socket: "{{ mysql_socket }}"
    sql_log_bin: false
    state: absent
  no_log: true

- name: Include MGR tasks
  include_tasks: mysql_group_replication.yaml
  when: mysql_cluster_type == 'mgr'

- name: Include Master-Slave tasks
  include_tasks: master_slave.yaml
  when: mysql_cluster_type == 'ms'

- name: Ensure business databases
  mysql_db:
    name: "{{ item.name }}"
    login_user: root
    login_password: "{{ mysql_root_password }}"
    login_unix_socket: "{{ mysql_socket }}"
    state: "{{ item.state | default('present') }}"
  run_once: true
  loop: "{{ mysql_databases }}"
  when:
    - mysql_databases|length > 0
    - (mysql_cluster_type == 'mgr' and ansible_play_hosts.index(inventory_hostname) == 0) or (mysql_cluster_type == 'ms' and mysql_cluster_role == 'master')
